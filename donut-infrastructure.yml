AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BaseStackName:
    Description: Name of the base stack with all infrastructure resources
    Type: String
    Default: DonutBase

Resources:

  # obviously wouldn't use this role in production
  # (I would make many roles with fine grained permissions)
  # but that's outside the scope of this project
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - ecs-tasks.amazonaws.com
                - s3.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
          
  DonutWebApplication: 
    Type: AWS::CodeDeploy::Application 
    Properties:
      ComputePlatform: ECS

  DonutImageRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: donutimagerepo

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "All access security group"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-VPC"

  CodeBuildEgressAllAccess:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref CodeBuildSecurityGroup
      CidrIp: '0.0.0.0/0'
      FromPort: -1
      ToPort: -1
      IpProtocol: '-1'

  ImageBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt AdminRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
        EnvironmentVariables:
          - 
            Name: AWS_DEFAULT_REGION
            Value:
              Fn::Sub: "${AWS::Region}"
          -
            Name: AWS_ACCOUNT_ID
            Value:
              Fn::Sub: "${AWS::AccountId}"
          -
            Name: IMAGE_TAG
            Value: latest
          -
            Name: IMAGE_REPO_NAME
            Value: !GetAtt DonutImageRepo.RepositoryUri

      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
      VpcConfig:
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${BaseStackName}-VPC"
        Subnets:
          - Fn::ImportValue:
              Fn::Sub: "${BaseStackName}-PrivateSubnetA"
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Cache:
        Type: S3
        Location:
          Fn::ImportValue:
            Fn::Sub: "${BaseStackName}-S3Bucket"

  ImageBuilderPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt AdminRole.Arn
      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue:
            Fn::Sub: "${BaseStackName}-S3Bucket"
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              Configuration:
                BranchName: Main
                RepositoryName: DonutWebAppRepo
              OutputArtifacts:
                - Name: CodeArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref ImageBuildProject
              OutputArtifacts:
                - Name: ImageArtifact
              InputArtifacts:
                - Name: CodeArtifact

  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-PublicSubnetA"
      Tags:
      - Key: stack
        Value: production
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-VPC"
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-PrivateSubnetA"
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-PrivateSubnetB"
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway

# ECS and Fargate Stuff

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: donut-ecs-cluster

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS containers
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: donut-log-group

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: donut-deployment-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt AdminRole.Arn          
      ContainerDefinitions:
        - Name: donut-django-container
          Image: !GetAtt DonutImageRepo.RepositoryUri
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            -
              Name: DB_NAME
              Value:
                Fn::ImportValue:
                  Fn::Sub: "${BaseStackName}-DBName"
            -
              Name: DB_USERNAME
              Value:
                Fn::ImportValue:
                  Fn::Sub: "${BaseStackName}-DBUser"    
            -
              Name: DB_PASSWORD
              Value:
                Fn::ImportValue:
                  Fn::Sub: "${BaseStackName}-DBPassword"
            -
              Name: DB_ENDPOINT
              Value:
                Fn::ImportValue:
                  Fn::Sub: "${BaseStackName}-DBEndpoint"
      RequiresCompatibilities:
        - EC2
        - FARGATE

  ECSService:
    DependsOn: WebListener
    Type: AWS::ECS::Service
    Properties:
      ServiceName: donut-deployment-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: donut-django-container
          ContainerPort: 8000
          TargetGroupArn: !Ref ECSTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue:
                Fn::Sub: "${BaseStackName}-PublicSubnetA"
            - Fn::ImportValue:
                Fn::Sub: "${BaseStackName}-PublicSubnetB"
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId

  DonutLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SubnetMappings:
        - SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${BaseStackName}-PublicSubnetA"
        - SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${BaseStackName}-PublicSubnetB"
      Type: network

  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ECSTargetGroup
          Type: forward
      LoadBalancerArn: !Ref DonutLoadBalancer
      Port: 80
      Protocol: TCP

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      HealthCheckPort: 8000
      Protocol: TCP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-VPC"